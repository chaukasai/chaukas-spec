// Copyright 2025 Chaukas AI
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chaukas/spec/server/v1/server.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChaukasServerService_Healthz_FullMethodName          = "/chaukas.spec.server.v1.ChaukasServerService/Healthz"
	ChaukasServerService_GetCapabilities_FullMethodName  = "/chaukas.spec.server.v1.ChaukasServerService/GetCapabilities"
	ChaukasServerService_IngestEvent_FullMethodName      = "/chaukas.spec.server.v1.ChaukasServerService/IngestEvent"
	ChaukasServerService_IngestEventBatch_FullMethodName = "/chaukas.spec.server.v1.ChaukasServerService/IngestEventBatch"
	ChaukasServerService_QueryEvents_FullMethodName      = "/chaukas.spec.server.v1.ChaukasServerService/QueryEvents"
	ChaukasServerService_GetEventStats_FullMethodName    = "/chaukas.spec.server.v1.ChaukasServerService/GetEventStats"
)

// ChaukasServerServiceClient is the client API for ChaukasServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Server-side Chaukas service for platform implementation
type ChaukasServerServiceClient interface {
	// Health check endpoint
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	// Get supported capabilities
	GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest, opts ...grpc.CallOption) (*GetCapabilitiesResponse, error)
	// Ingest a single event
	IngestEvent(ctx context.Context, in *IngestEventRequest, opts ...grpc.CallOption) (*IngestEventResponse, error)
	// Ingest a batch of events
	IngestEventBatch(ctx context.Context, in *IngestEventBatchRequest, opts ...grpc.CallOption) (*IngestEventBatchResponse, error)
	// Query events
	QueryEvents(ctx context.Context, in *QueryEventsRequest, opts ...grpc.CallOption) (*QueryEventsResponse, error)
	// Server-specific: Get event statistics
	GetEventStats(ctx context.Context, in *GetEventStatsRequest, opts ...grpc.CallOption) (*GetEventStatsResponse, error)
}

type chaukasServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChaukasServerServiceClient(cc grpc.ClientConnInterface) ChaukasServerServiceClient {
	return &chaukasServerServiceClient{cc}
}

func (c *chaukasServerServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, ChaukasServerService_Healthz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaukasServerServiceClient) GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest, opts ...grpc.CallOption) (*GetCapabilitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCapabilitiesResponse)
	err := c.cc.Invoke(ctx, ChaukasServerService_GetCapabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaukasServerServiceClient) IngestEvent(ctx context.Context, in *IngestEventRequest, opts ...grpc.CallOption) (*IngestEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestEventResponse)
	err := c.cc.Invoke(ctx, ChaukasServerService_IngestEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaukasServerServiceClient) IngestEventBatch(ctx context.Context, in *IngestEventBatchRequest, opts ...grpc.CallOption) (*IngestEventBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestEventBatchResponse)
	err := c.cc.Invoke(ctx, ChaukasServerService_IngestEventBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaukasServerServiceClient) QueryEvents(ctx context.Context, in *QueryEventsRequest, opts ...grpc.CallOption) (*QueryEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryEventsResponse)
	err := c.cc.Invoke(ctx, ChaukasServerService_QueryEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaukasServerServiceClient) GetEventStats(ctx context.Context, in *GetEventStatsRequest, opts ...grpc.CallOption) (*GetEventStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventStatsResponse)
	err := c.cc.Invoke(ctx, ChaukasServerService_GetEventStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChaukasServerServiceServer is the server API for ChaukasServerService service.
// All implementations must embed UnimplementedChaukasServerServiceServer
// for forward compatibility.
//
// Server-side Chaukas service for platform implementation
type ChaukasServerServiceServer interface {
	// Health check endpoint
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	// Get supported capabilities
	GetCapabilities(context.Context, *GetCapabilitiesRequest) (*GetCapabilitiesResponse, error)
	// Ingest a single event
	IngestEvent(context.Context, *IngestEventRequest) (*IngestEventResponse, error)
	// Ingest a batch of events
	IngestEventBatch(context.Context, *IngestEventBatchRequest) (*IngestEventBatchResponse, error)
	// Query events
	QueryEvents(context.Context, *QueryEventsRequest) (*QueryEventsResponse, error)
	// Server-specific: Get event statistics
	GetEventStats(context.Context, *GetEventStatsRequest) (*GetEventStatsResponse, error)
	mustEmbedUnimplementedChaukasServerServiceServer()
}

// UnimplementedChaukasServerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChaukasServerServiceServer struct{}

func (UnimplementedChaukasServerServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedChaukasServerServiceServer) GetCapabilities(context.Context, *GetCapabilitiesRequest) (*GetCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapabilities not implemented")
}
func (UnimplementedChaukasServerServiceServer) IngestEvent(context.Context, *IngestEventRequest) (*IngestEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestEvent not implemented")
}
func (UnimplementedChaukasServerServiceServer) IngestEventBatch(context.Context, *IngestEventBatchRequest) (*IngestEventBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestEventBatch not implemented")
}
func (UnimplementedChaukasServerServiceServer) QueryEvents(context.Context, *QueryEventsRequest) (*QueryEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEvents not implemented")
}
func (UnimplementedChaukasServerServiceServer) GetEventStats(context.Context, *GetEventStatsRequest) (*GetEventStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventStats not implemented")
}
func (UnimplementedChaukasServerServiceServer) mustEmbedUnimplementedChaukasServerServiceServer() {}
func (UnimplementedChaukasServerServiceServer) testEmbeddedByValue()                              {}

// UnsafeChaukasServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChaukasServerServiceServer will
// result in compilation errors.
type UnsafeChaukasServerServiceServer interface {
	mustEmbedUnimplementedChaukasServerServiceServer()
}

func RegisterChaukasServerServiceServer(s grpc.ServiceRegistrar, srv ChaukasServerServiceServer) {
	// If the following call pancis, it indicates UnimplementedChaukasServerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChaukasServerService_ServiceDesc, srv)
}

func _ChaukasServerService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaukasServerServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaukasServerService_Healthz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaukasServerServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaukasServerService_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaukasServerServiceServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaukasServerService_GetCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaukasServerServiceServer).GetCapabilities(ctx, req.(*GetCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaukasServerService_IngestEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaukasServerServiceServer).IngestEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaukasServerService_IngestEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaukasServerServiceServer).IngestEvent(ctx, req.(*IngestEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaukasServerService_IngestEventBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestEventBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaukasServerServiceServer).IngestEventBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaukasServerService_IngestEventBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaukasServerServiceServer).IngestEventBatch(ctx, req.(*IngestEventBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaukasServerService_QueryEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaukasServerServiceServer).QueryEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaukasServerService_QueryEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaukasServerServiceServer).QueryEvents(ctx, req.(*QueryEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaukasServerService_GetEventStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaukasServerServiceServer).GetEventStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaukasServerService_GetEventStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaukasServerServiceServer).GetEventStats(ctx, req.(*GetEventStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChaukasServerService_ServiceDesc is the grpc.ServiceDesc for ChaukasServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChaukasServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chaukas.spec.server.v1.ChaukasServerService",
	HandlerType: (*ChaukasServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _ChaukasServerService_Healthz_Handler,
		},
		{
			MethodName: "GetCapabilities",
			Handler:    _ChaukasServerService_GetCapabilities_Handler,
		},
		{
			MethodName: "IngestEvent",
			Handler:    _ChaukasServerService_IngestEvent_Handler,
		},
		{
			MethodName: "IngestEventBatch",
			Handler:    _ChaukasServerService_IngestEventBatch_Handler,
		},
		{
			MethodName: "QueryEvents",
			Handler:    _ChaukasServerService_QueryEvents_Handler,
		},
		{
			MethodName: "GetEventStats",
			Handler:    _ChaukasServerService_GetEventStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chaukas/spec/server/v1/server.proto",
}
