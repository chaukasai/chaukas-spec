// Copyright 2025 Chaukas AI
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chaukas/spec/client/v1/client.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChaukasClientService_Healthz_FullMethodName          = "/chaukas.spec.client.v1.ChaukasClientService/Healthz"
	ChaukasClientService_GetCapabilities_FullMethodName  = "/chaukas.spec.client.v1.ChaukasClientService/GetCapabilities"
	ChaukasClientService_IngestEvent_FullMethodName      = "/chaukas.spec.client.v1.ChaukasClientService/IngestEvent"
	ChaukasClientService_IngestEventBatch_FullMethodName = "/chaukas.spec.client.v1.ChaukasClientService/IngestEventBatch"
	ChaukasClientService_QueryEvents_FullMethodName      = "/chaukas.spec.client.v1.ChaukasClientService/QueryEvents"
)

// ChaukasClientServiceClient is the client API for ChaukasClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Client-side Chaukas service for SDK integration
type ChaukasClientServiceClient interface {
	// Health check endpoint
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	// Get supported capabilities
	GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest, opts ...grpc.CallOption) (*GetCapabilitiesResponse, error)
	// Ingest a single event
	IngestEvent(ctx context.Context, in *IngestEventRequest, opts ...grpc.CallOption) (*IngestEventResponse, error)
	// Ingest a batch of events
	IngestEventBatch(ctx context.Context, in *IngestEventBatchRequest, opts ...grpc.CallOption) (*IngestEventBatchResponse, error)
	// Query events
	QueryEvents(ctx context.Context, in *QueryEventsRequest, opts ...grpc.CallOption) (*QueryEventsResponse, error)
}

type chaukasClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChaukasClientServiceClient(cc grpc.ClientConnInterface) ChaukasClientServiceClient {
	return &chaukasClientServiceClient{cc}
}

func (c *chaukasClientServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, ChaukasClientService_Healthz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaukasClientServiceClient) GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest, opts ...grpc.CallOption) (*GetCapabilitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCapabilitiesResponse)
	err := c.cc.Invoke(ctx, ChaukasClientService_GetCapabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaukasClientServiceClient) IngestEvent(ctx context.Context, in *IngestEventRequest, opts ...grpc.CallOption) (*IngestEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestEventResponse)
	err := c.cc.Invoke(ctx, ChaukasClientService_IngestEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaukasClientServiceClient) IngestEventBatch(ctx context.Context, in *IngestEventBatchRequest, opts ...grpc.CallOption) (*IngestEventBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestEventBatchResponse)
	err := c.cc.Invoke(ctx, ChaukasClientService_IngestEventBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaukasClientServiceClient) QueryEvents(ctx context.Context, in *QueryEventsRequest, opts ...grpc.CallOption) (*QueryEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryEventsResponse)
	err := c.cc.Invoke(ctx, ChaukasClientService_QueryEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChaukasClientServiceServer is the server API for ChaukasClientService service.
// All implementations must embed UnimplementedChaukasClientServiceServer
// for forward compatibility.
//
// Client-side Chaukas service for SDK integration
type ChaukasClientServiceServer interface {
	// Health check endpoint
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	// Get supported capabilities
	GetCapabilities(context.Context, *GetCapabilitiesRequest) (*GetCapabilitiesResponse, error)
	// Ingest a single event
	IngestEvent(context.Context, *IngestEventRequest) (*IngestEventResponse, error)
	// Ingest a batch of events
	IngestEventBatch(context.Context, *IngestEventBatchRequest) (*IngestEventBatchResponse, error)
	// Query events
	QueryEvents(context.Context, *QueryEventsRequest) (*QueryEventsResponse, error)
	mustEmbedUnimplementedChaukasClientServiceServer()
}

// UnimplementedChaukasClientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChaukasClientServiceServer struct{}

func (UnimplementedChaukasClientServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedChaukasClientServiceServer) GetCapabilities(context.Context, *GetCapabilitiesRequest) (*GetCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapabilities not implemented")
}
func (UnimplementedChaukasClientServiceServer) IngestEvent(context.Context, *IngestEventRequest) (*IngestEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestEvent not implemented")
}
func (UnimplementedChaukasClientServiceServer) IngestEventBatch(context.Context, *IngestEventBatchRequest) (*IngestEventBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestEventBatch not implemented")
}
func (UnimplementedChaukasClientServiceServer) QueryEvents(context.Context, *QueryEventsRequest) (*QueryEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEvents not implemented")
}
func (UnimplementedChaukasClientServiceServer) mustEmbedUnimplementedChaukasClientServiceServer() {}
func (UnimplementedChaukasClientServiceServer) testEmbeddedByValue()                              {}

// UnsafeChaukasClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChaukasClientServiceServer will
// result in compilation errors.
type UnsafeChaukasClientServiceServer interface {
	mustEmbedUnimplementedChaukasClientServiceServer()
}

func RegisterChaukasClientServiceServer(s grpc.ServiceRegistrar, srv ChaukasClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedChaukasClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChaukasClientService_ServiceDesc, srv)
}

func _ChaukasClientService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaukasClientServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaukasClientService_Healthz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaukasClientServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaukasClientService_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaukasClientServiceServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaukasClientService_GetCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaukasClientServiceServer).GetCapabilities(ctx, req.(*GetCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaukasClientService_IngestEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaukasClientServiceServer).IngestEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaukasClientService_IngestEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaukasClientServiceServer).IngestEvent(ctx, req.(*IngestEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaukasClientService_IngestEventBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestEventBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaukasClientServiceServer).IngestEventBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaukasClientService_IngestEventBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaukasClientServiceServer).IngestEventBatch(ctx, req.(*IngestEventBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaukasClientService_QueryEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaukasClientServiceServer).QueryEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaukasClientService_QueryEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaukasClientServiceServer).QueryEvents(ctx, req.(*QueryEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChaukasClientService_ServiceDesc is the grpc.ServiceDesc for ChaukasClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChaukasClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chaukas.spec.client.v1.ChaukasClientService",
	HandlerType: (*ChaukasClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _ChaukasClientService_Healthz_Handler,
		},
		{
			MethodName: "GetCapabilities",
			Handler:    _ChaukasClientService_GetCapabilities_Handler,
		},
		{
			MethodName: "IngestEvent",
			Handler:    _ChaukasClientService_IngestEvent_Handler,
		},
		{
			MethodName: "IngestEventBatch",
			Handler:    _ChaukasClientService_IngestEventBatch_Handler,
		},
		{
			MethodName: "QueryEvents",
			Handler:    _ChaukasClientService_QueryEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chaukas/spec/client/v1/client.proto",
}
